package org.siid.cinemamvcetangular.service;

import org.siid.cinemamvcetangular.dao.*;
import org.siid.cinemamvcetangular.entities.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.stream.Stream;

@Transactional
@Service
public class CinemaDataInitializationServiceImpl implements ICinemaDataInitializationService{

    @Autowired
    private CityRepository cityRepository;
    @Autowired
    private CinemaRepository cinemaRepository;
    @Autowired
    private RoomRepository roomRepository;
    @Autowired
    private PlaceRepository placeRepository;
    @Autowired
    private CategoryFilmRepository categoryFilmRepository;
    @Autowired
    private FilmRepository filmRepository;
    @Autowired
    private ProjectionOfFilmRoomRepository projectionOfFilmRoomRepository;
    @Autowired
    private FilmSessionRepository filmSessionRepository;
    @Autowired
    private TicketRepository ticketRepository;

    @Override
    public void initCities() {
        Stream.of("Casablanca","Tanger","Rabat","Agadir").forEach(cityName->{
            City city = new City();
            city.setName(cityName);
            cityRepository.save(city);
        });
    }

    @Override
    public void initCinemas() {
        cityRepository.findAll().forEach(city -> {
            Stream.of("IMAX","Dawliz","فنون","Megarama","CinemaBoho").forEach(cinemaName->{
                Cinema cinema = new Cinema();
                cinema.setName(cinemaName);
                cinema.setRoomNumbers(3+ (int)(Math.random()*7));//'Math.random()': this returns a double num between 0 & 1.
                cinema.setCity(city);//'(3+ (int)(Math.random()*7))': this gives us a random number between 3 & 10.
                cinemaRepository.save(cinema);
            });
        });
    }

    @Override
    public void initRooms() {
            cinemaRepository.findAll().forEach(cinema -> {
                for (int i = 0; i < cinema.getRoomNumbers(); i++) {
                    Room room = new Room();
                    room.setName("Room N°"+(i+1));
                    room.setCinema(cinema);
                    room.setPlaceNumbers(20 + new Random().nextInt(15));
                    roomRepository.save(room);
                }
            });
    }

    @Override
    public void initPlaces() {
        roomRepository.findAll().forEach(room -> {
            for (int i = 1; i < room.getPlaceNumbers(); i++) {
                Place place = new Place();
                place.setPlaceNumber(i);
                place.setRoom(room);//Means: this 'place' concerns this 'room'
                placeRepository.save(place);
            }
        });
    }

    @Override
    public void initFilmSessionsOfFilmProjection() {
        DateFormat dateFormat = new SimpleDateFormat("HH:mm");
        Stream.of("15:00", "17:00", "19:00", "21:00", "23:00").forEach(hourDebut->{
            FilmSession filmSession = new FilmSession();
            try {
                filmSession.setHourDebut(dateFormat.parse(hourDebut));
                filmSessionRepository.save(filmSession);
            } catch (ParseException e) {
                e.printStackTrace();
            }
        });
    }

    @Override
    public void initFilmCategories() {
        Stream.of("Action", "Drama", "Police", "History", "Comedy").forEach(categoryName->{
            CategoryFilm categoryFilm = new CategoryFilm();
            categoryFilm.setName(categoryName);
            categoryFilmRepository.save(categoryFilm);
        });
    }

    @Override
    public void initFilms() {
            Double [] durations = new Double[]{1.0, 1.5, 2.0, 2.5};
            List<CategoryFilm> categories = categoryFilmRepository.findAll();
            Stream.of("Forrest Gump", "Ottoman Empire", "Hdidan", "Bad Boys").forEach(filmTitle->{
                Film film = new Film();
                film.setTitle(filmTitle);
                film.setPicture(filmTitle);
                film.setDuration(durations[new Random().nextInt(durations.length)]);
                film.setCategoryFilm(categories.get(new Random().nextInt(categories.size())));
                filmRepository.save(film);
            });

    }
    //Counters down below are just for Testing the Number of Projections 'ProjectionOfFilmRoom'(s) generated by the method down below:
    int counterCities=0;
    int counterCinemas=0;
    int counterRooms=0;
    int counterFilms=0;
    int counterFilmSessions=0;
    int counterProjections=0;
    int counterTickets=0;

    @Override
    public void initProjectionOfFilmInRoom() {
        //Here we define Projections OF Films Within a specific Date by calling each
        // FilmSession of a Film within a Room Of a Cinema that belongs to a City ACCORDING TO The 'UML Class Diagram':
        Double [] projectionsPrices = new Double[]{45.00, 55.0, 60.0, 70.0, 90.0};
        List<Film> films = filmRepository.findAll();
        cityRepository.findAll().forEach(city -> {//4 Cities:
            counterCities++;
            //cinemaRepository.findAll().forEach(cinema -> {//Each 1 City will have all Cinemas (20 cinemas):
            city.getCinemas().forEach(cinema -> {//Each 1 City will have all Cinemas (5 cinemas):
                counterCinemas++;
                cinema.getRooms().forEach(room -> {//Each 1 Cinema will have the random number of Rooms 'between 3 & 10' (here: 5.65 Rooms):
                    counterRooms++;
                    int randomFilmIndex = new Random().nextInt(films.size());
                    Film film = films.get(randomFilmIndex);/**Instead of getting All Films for All Rooms, I get a 1 random 'Film' for each 'Room':*/
                    //filmRepository.findAll().forEach(film -> {//Each 1 Room of the (Number of random Rooms between 3 & 10) gotten will have 4 Films played in each room:
                        counterFilms++;
                        filmSessionRepository.findAll().forEach(filmSession -> {//Each 1 Film & 1 Room of the 5.65 Rooms & 4 Films gotten will have 5 FilmSessions played in:
                            System.out.println("*************** TEST: **************");
                            System.out.println("initProjectionOfFilmInRoom: >> 'projectionOfFilmRoomRepository'");
                            System.out.println("*****************************");
                            ProjectionOfFilmRoom projectionOfFilmInRoom = new ProjectionOfFilmRoom();
                            counterProjections++;
                            projectionOfFilmInRoom.setProjectionDate(new Date());
                            counterFilmSessions++;
                            projectionOfFilmInRoom.setFilmSession(filmSession);//Here: we consider each 1 'ProjectionOfFilmInRoom' concerns 1 'FilmSession' (Normally ProjectionOfFilmInRoom could be replaced with FilmSession):
                            projectionOfFilmInRoom.setFilm(film);
                            projectionOfFilmInRoom.setRoom(room);
                            projectionOfFilmInRoom.setPrice(projectionsPrices[new Random().nextInt(projectionsPrices.length)]);
                            projectionOfFilmRoomRepository.save(projectionOfFilmInRoom);
                        });
                   // });
                });
            });
        });
    }

    @Override
    public void initTickets() {
        projectionOfFilmRoomRepository.findAll().forEach(projectionOfFilmRoom -> {
            System.out.println("*************** TEST: **************");
            System.out.println("initTickets: >> 'projectionOfFilmRoomRepository'");
            System.out.println("*****************************");
            projectionOfFilmRoom.getRoom().getPlaces().forEach(place -> {
                Ticket ticket = new Ticket();
                ticket.setPlace(place);
                ticket.setProjectionOfFilmRoom(projectionOfFilmRoom);
                ticket.setTicketPrice(projectionOfFilmRoom.getPrice());
                ticket.setReserved(false);
                counterTickets++;
                ticketRepository.save(ticket);
            });
        });
        System.out.println(" ----------- City Counter ----------"+ counterCities);
        System.out.println(" ----------- Cinema Counter ----------"+counterCinemas);
        System.out.println(" ----------- Room Counter ----------"+ counterRooms);
        System.out.println(" ----------- Film Counter ----------"+counterFilms);
        System.out.println("-------------- Projections Counter: ----" + counterProjections);
        System.out.println("---------- Seance Counter: ----" + counterFilmSessions);
        System.out.println("---------- Tickets Counter: ----" + counterTickets);
    }
}
